{"ast":null,"code":"/**\r\n * braille\r\n * https://github.com/Nonemoticoner/braille\r\n *\r\n * Copyright (c) 2015 Nonemoticoner\r\n * Licensed under the MIT license.\r\n */\n\nmodule.exports = {\n  sets: {\n    ascii: \" A1B\\'K2L@CIF/MSP\\\"E3H9O6R^DJG>NTQ,*5<-U8V.%[$+X!&;:4\\\\0Z7(_?W]#Y)=\",\n    dot6: \"⠀⠁⠂⠃⠄⠅⠆⠇⠈⠉⠊⠋⠌⠍⠎⠏⠐⠑⠒⠓⠔⠕⠖⠗⠘⠙⠚⠛⠜⠝⠞⠟⠠⠡⠢⠣⠤⠥⠦⠧⠨⠩⠪⠫⠬⠭⠮⠯⠰⠱⠲⠳⠴⠵⠶⠷⠸⠹⠺⠻⠼⠽⠾⠿\"\n  },\n  // converts character to Braille symbol\n  convert: function (character) {\n    var sign = undefined;\n\n    // searches sets\n    for (var i = this.sets.ascii.length - 1; i >= 0; i--) {\n      if (this.sets.ascii[i] == character) {\n        sign = this.sets.dot6[i];\n      }\n    }\n\n    // if not found will return undefined\n    return sign;\n  },\n  // converts Braille symbol to letter\n  read: function (symbol) {\n    var letter = undefined;\n\n    // searches sets\n    for (var i = this.sets.ascii.length - 1; i >= 0; i--) {\n      if (this.sets.dot6[i] == symbol) {\n        letter = this.sets.ascii[i];\n      }\n    }\n\n    // if not found will return undefined\n    return letter;\n  },\n  // ---------------------------------------\n\n  // converts text to ASCII Braille alphabet\n  toBraille: function (text) {\n    // make given text uppercase\n    var upper = text.toUpperCase(),\n      result = \"\";\n    for (var i = 0; i < upper.length; i++) {\n      var symbol = this.convert(upper[i]);\n\n      // unsupported letters will be ommited\n      if (typeof symbol == \"undefined\") {\n        result += \"\";\n      } else {\n        result += symbol;\n      }\n    }\n    return result;\n  },\n  // converts ASCII Braille alphabet to text\n  toText: function (code) {\n    var result = \"\";\n    for (var i = 0; i < code.length; i++) {\n      var symbol = this.read(code[i]);\n\n      // unsupported letters will be ommited\n      if (typeof symbol == \"undefined\") {\n        result += \"\";\n      } else {\n        result += symbol;\n      }\n    }\n    return result;\n  }\n};","map":{"version":3,"names":["module","exports","sets","ascii","dot6","convert","character","sign","undefined","i","length","read","symbol","letter","toBraille","text","upper","toUpperCase","result","toText","code"],"sources":["/Users/manishtiwari/Downloads/YouTube-Transcript-Summarizer-master/youtube-transcript-summarizer-frontend/node_modules/braille/index.js"],"sourcesContent":["/**\r\n * braille\r\n * https://github.com/Nonemoticoner/braille\r\n *\r\n * Copyright (c) 2015 Nonemoticoner\r\n * Licensed under the MIT license.\r\n */\r\n\r\nmodule.exports = {\r\n\tsets: {\r\n\t\tascii: \" A1B\\'K2L@CIF/MSP\\\"E3H9O6R^DJG>NTQ,*5<-U8V.%[$+X!&;:4\\\\0Z7(_?W]#Y)=\",\r\n\t\tdot6:  \"⠀⠁⠂⠃⠄⠅⠆⠇⠈⠉⠊⠋⠌⠍⠎⠏⠐⠑⠒⠓⠔⠕⠖⠗⠘⠙⠚⠛⠜⠝⠞⠟⠠⠡⠢⠣⠤⠥⠦⠧⠨⠩⠪⠫⠬⠭⠮⠯⠰⠱⠲⠳⠴⠵⠶⠷⠸⠹⠺⠻⠼⠽⠾⠿\"\r\n\t},\r\n\r\n\t// converts character to Braille symbol\r\n\tconvert: function (character) {\r\n\t\tvar sign = undefined;\r\n\r\n\t\t// searches sets\r\n\t\tfor (var i = this.sets.ascii.length - 1; i >= 0; i--) {\r\n\t\t\tif(this.sets.ascii[i] == character){\r\n\t\t\t\tsign = this.sets.dot6[i];\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// if not found will return undefined\r\n\t\treturn sign;\r\n\t},\r\n\r\n\t// converts Braille symbol to letter\r\n\tread: function (symbol) {\r\n\t\tvar letter = undefined;\r\n\r\n\t\t// searches sets\r\n\t\tfor (var i = this.sets.ascii.length - 1; i >= 0; i--) {\r\n\t\t\tif(this.sets.dot6[i] == symbol){\r\n\t\t\t\tletter = this.sets.ascii[i];\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// if not found will return undefined\r\n\t\treturn letter;\r\n\t},\r\n\r\n\t// ---------------------------------------\r\n\r\n\t// converts text to ASCII Braille alphabet\r\n\ttoBraille: function (text) {\r\n\t\t// make given text uppercase\r\n\t\tvar upper = text.toUpperCase(),\r\n\t\t\tresult = \"\";\r\n\r\n\t\tfor(var i = 0; i < upper.length; i++) {\r\n\t\t\tvar symbol = this.convert(upper[i]);\r\n\r\n\t\t\t// unsupported letters will be ommited\r\n\t\t\tif(typeof symbol == \"undefined\"){\r\n\t\t\t\tresult += \"\";\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tresult += symbol;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t},\r\n\r\n\t// converts ASCII Braille alphabet to text\r\n\ttoText: function (code) {\r\n\t\t\r\n\t\tvar result = \"\";\r\n\r\n\t\tfor(var i = 0; i < code.length; i++) {\r\n\t\t\tvar symbol = this.read(code[i]);\r\n\r\n\t\t\t// unsupported letters will be ommited\r\n\t\t\tif(typeof symbol == \"undefined\"){\r\n\t\t\t\tresult += \"\";\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tresult += symbol;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\t\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAO,GAAG;EAChBC,IAAI,EAAE;IACLC,KAAK,EAAE,qEAAqE;IAC5EC,IAAI,EAAG;EACR,CAAC;EAED;EACAC,OAAO,EAAE,SAAAA,CAAUC,SAAS,EAAE;IAC7B,IAAIC,IAAI,GAAGC,SAAS;;IAEpB;IACA,KAAK,IAAIC,CAAC,GAAG,IAAI,CAACP,IAAI,CAACC,KAAK,CAACO,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MACrD,IAAG,IAAI,CAACP,IAAI,CAACC,KAAK,CAACM,CAAC,CAAC,IAAIH,SAAS,EAAC;QAClCC,IAAI,GAAG,IAAI,CAACL,IAAI,CAACE,IAAI,CAACK,CAAC,CAAC;MACzB;IACD;;IAEA;IACA,OAAOF,IAAI;EACZ,CAAC;EAED;EACAI,IAAI,EAAE,SAAAA,CAAUC,MAAM,EAAE;IACvB,IAAIC,MAAM,GAAGL,SAAS;;IAEtB;IACA,KAAK,IAAIC,CAAC,GAAG,IAAI,CAACP,IAAI,CAACC,KAAK,CAACO,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MACrD,IAAG,IAAI,CAACP,IAAI,CAACE,IAAI,CAACK,CAAC,CAAC,IAAIG,MAAM,EAAC;QAC9BC,MAAM,GAAG,IAAI,CAACX,IAAI,CAACC,KAAK,CAACM,CAAC,CAAC;MAC5B;IACD;;IAEA;IACA,OAAOI,MAAM;EACd,CAAC;EAED;;EAEA;EACAC,SAAS,EAAE,SAAAA,CAAUC,IAAI,EAAE;IAC1B;IACA,IAAIC,KAAK,GAAGD,IAAI,CAACE,WAAW,CAAC,CAAC;MAC7BC,MAAM,GAAG,EAAE;IAEZ,KAAI,IAAIT,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGO,KAAK,CAACN,MAAM,EAAED,CAAC,EAAE,EAAE;MACrC,IAAIG,MAAM,GAAG,IAAI,CAACP,OAAO,CAACW,KAAK,CAACP,CAAC,CAAC,CAAC;;MAEnC;MACA,IAAG,OAAOG,MAAM,IAAI,WAAW,EAAC;QAC/BM,MAAM,IAAI,EAAE;MACb,CAAC,MACG;QACHA,MAAM,IAAIN,MAAM;MACjB;IACD;IAEA,OAAOM,MAAM;EACd,CAAC;EAED;EACAC,MAAM,EAAE,SAAAA,CAAUC,IAAI,EAAE;IAEvB,IAAIF,MAAM,GAAG,EAAE;IAEf,KAAI,IAAIT,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGW,IAAI,CAACV,MAAM,EAAED,CAAC,EAAE,EAAE;MACpC,IAAIG,MAAM,GAAG,IAAI,CAACD,IAAI,CAACS,IAAI,CAACX,CAAC,CAAC,CAAC;;MAE/B;MACA,IAAG,OAAOG,MAAM,IAAI,WAAW,EAAC;QAC/BM,MAAM,IAAI,EAAE;MACb,CAAC,MACG;QACHA,MAAM,IAAIN,MAAM;MACjB;IACD;IAEA,OAAOM,MAAM;EACd;AAED,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}